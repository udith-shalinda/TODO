import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useEffect, useState } from "react";
import { AddTODO } from "../components/add-todo";
import { OneTODO } from "../components/one-todo";
import styles from "../styles/Home.module.css";
import { useRouter } from "next/router";
import { whoAmI } from "../services/user.service";
import { getMyTODOs } from "../services/todo.service";
import { resolve_accessToken, save_accessToken } from "../services/axios-client";
import { toast, ToastContainer } from "react-toastify";

export interface todoItem {
  id: string;
  name: string;
  completed: boolean;
}

const Home: NextPage = () => {
  const [todoList, settodoList] = useState<any[]>([]);
  const router = useRouter();

  useEffect(() => {
    checkToken();
  }, []);

  const checkToken = async () => {
    try {
      const data: any = await whoAmI();
      if (!data) {
        router.push("/login");
      } else {
        loadMyToDo();
      }
    } catch (error) {
      router.push("/login");
    }
  };
  const logout = async () => {
      save_accessToken('');
      router.push("/login");
  }

  const loadMyToDo = async () => {
    try {
      const data = await getMyTODOs();
      toast.success("TODO successfully loaded", {
        closeOnClick: true,
      });
      settodoList(
        data.map((todo: any) => {
          return { ...todo, id: todo._id };
        })
      );
    } catch (error) {
      toast.error("TODO loading failed", {
        closeOnClick: true,
      });
    }
  };

  const addTODO = (todo: todoItem) => {
    settodoList([...todoList, todo]);
  };
  const editTODO = (newTODO: string, index: number) => {
    const newTODOList = todoList.map((todo, i) => {
      if (i === index) {
        return { ...todo, name: newTODO };
      } else {
        return todo;
      }
    });
    settodoList(newTODOList);
  };
  const updateCompleteTodo = (index: number) => {
    const newTODOList = todoList.map((todo, i) => {
      if (i === index) {
        return { ...todo, completed: !todo.completed };
      } else {
        return todo;
      }
    });
    settodoList(newTODOList);
  };
  const deleteTODO = (id: number) => {
    settodoList(todoList.filter((todo) => todo.id !== id));
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <ToastContainer />
      <div className="bg-yellow-300 py-6 flex flex-row justify-between">
        <h3 className="text font-bold ml-8 mt-2 text-center">TODO APP</h3>
        <div className="flex flex-row mr-8">
          <button
            onClick={() => {
              logout()
            }}
            className="bg-green-600 rounded-md p-2"
          >
            Log out
          </button>
        </div>
      </div>

      <main className={styles.main}>
        <AddTODO addTODO={addTODO} />
        {todoList &&
          todoList.length > 0 &&
          todoList.map((todo, index) => {
            return (
              <OneTODO
                key={index}
                todo={todo}
                index={index}
                edit={editTODO}
                delete={deleteTODO}
                updateCompleteTodo={updateCompleteTodo}
              ></OneTODO>
            );
          })}
      </main>
    </div>
  );
};

export default Home;
